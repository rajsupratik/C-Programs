#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    char items[MAX_SIZE];
    int top;
};

void init(struct Stack* stack) {
    stack->top = -1;
}

bool is_empty(struct Stack* stack) {
    return stack->top == -1;
}

bool is_full(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, char item) {
    if (!is_full(stack)) {
        stack->items[++stack->top] = item;
    }
}

char pop(struct Stack* stack) {
    if (!is_empty(stack)) {
        return stack->items[stack->top--];
    }
    return '\0'; // Return null character for empty stack
}

bool is_palindrome(const char* input_string) {
    struct Stack stack;
    init(&stack);
    int len = strlen(input_string);
    
    // Push each character from the input string onto the stack
    for (int i = 0; i < len; i++) {
        push(&stack, input_string[i]);
    }

    // Pop characters from the stack to compare with the original string
    for (int i = 0; i < len; i++) {
        char popped = pop(&stack);
        if (popped != input_string[i]) {
            return false; // Not a palindrome
        }
    }

    return true; // Palindrome
}

int main() {
    char input_string[100];
    printf("Enter a string: ");
    scanf("%s", input_string);

    if (is_palindrome(input_string)) {
        printf("%s is a palindrome.\n", input_string);
    } else {
        printf("%s is not a palindrome.\n", input_string);
    }

    return 0;
}
